<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ccp.simple.mapper.NewsMapper">

    <select id="getAllNews" resultType="com.ccp.simple.dto.NewsResponseDto">
        SELECT
        n.news_id,
            n.title,
            n.link,
            n.description,
            n.pub_dt,
            string_agg(DISTINCT k.keyword, ', ') AS keywords,
            n.visible,
            n.like_count,
            n.view_count
        FROM NEWS_INFO n
        LEFT JOIN NEWS_KEYWORD_MAPPING m ON n.news_id = m.news_id
        LEFT JOIN KEYWORD_INFO k ON m.keyword_id = k.keyword_id
        GROUP BY n.news_id
        ORDER BY n.pub_dt DESC
    </select>

    <select id="findNewsByIds" resultType="com.ccp.simple.dto.NewsResponseDto">
        SELECT n.news_id,
        n.title,
        n.link,
        n.description,
        n.pub_dt,
        string_agg(k.keyword, ', ') AS keywords,
        n.visible,
        n.like_count
        FROM NEWS_INFO n
        LEFT JOIN NEWS_KEYWORD_MAPPING m ON n.news_id = m.news_id
        LEFT JOIN KEYWORD_INFO k ON m.keyword_id = k.keyword_id
        WHERE n.news_id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        GROUP BY n.news_id, n.title, n.link, n.description, n.pub_dt, n.visible, n.like_count, n.view_count
    </select>

    <select id="getAllSubcribedNews" resultType="com.ccp.simple.dto.NewsResponseDto">
        SELECT
            n.news_id,
            n.title,
            n.link,
            n.description,
            n.pub_dt,
            string_agg(DISTINCT k.keyword, ', ') AS keywords,
            n.visible,
            n.like_count,
            n.view_count
        FROM NEWS_INFO n
        LEFT JOIN NEWS_KEYWORD_MAPPING m ON n.news_id = m.news_id
        LEFT JOIN KEYWORD_INFO k ON m.keyword_id = k.keyword_id
        JOIN user_keyword_mapping ukm ON k.keyword_id = ukm.keyword_id
        WHERE ukm.user_id = #{userId}
        GROUP BY n.news_id
        ORDER BY n.pub_dt DESC
    </select>

    <update id="updateNewsVisibility">
        UPDATE NEWS_INFO
        SET visible = #{visible}
        WHERE news_id = #{newsId}
    </update>

    <update id="updateLikeCount">
        UPDATE NEWS_INFO
        SET like_count = #{likeCount}
        WHERE news_id = #{newsId}
    </update>

    <insert id="insertNews" parameterType="com.ccp.simple.domain.News" useGeneratedKeys="true" keyProperty="newsId">
        INSERT INTO NEWS_INFO (
            title,
            link,
            description,
            pub_dt,
            visible
        ) VALUES (
                     #{title},
                     #{link},
                     #{description},
                     #{pubDt},
                     #{visible}
                 )
            ON CONFLICT (link) DO NOTHING
    </insert>

    <insert id="insertNewsKeywordMapping">
        INSERT INTO NEWS_KEYWORD_MAPPING (
            news_id,
            keyword_id
        ) VALUES (
                     #{newsId},
                     #{keywordId}
                 )
            ON CONFLICT DO NOTHING
    </insert>

    <select id="existsByLink" parameterType="string" resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM NEWS_INFO
            WHERE link = #{link}
        )
    </select>

    <select id="getNewsIdByLink" parameterType="string" resultType="long">
        SELECT news_id
        FROM NEWS_INFO
        WHERE link = #{link}
    </select>

    <insert id="insertKeyword" parameterType="com.ccp.simple.domain.Keyword">
        INSERT INTO KEYWORD_INFO(
            KEYWORD,
            USER_ID,
            CREATE_DT
        )
        VALUES
            (
                #{keyword},
                #{userId},
                CURRENT_TIMESTAMP
            )
    </insert>

    <select id="getAllKeywords" resultType="com.ccp.simple.domain.Keyword">
        SELECT
            KEYWORD_ID,
            KEYWORD,
            CREATE_DT
        FROM KEYWORD_INFO
    </select>

    <delete id="deleteKeyword" parameterType="int">
        DELETE
        FROM KEYWORD_INFO
        WHERE KEYWORD_ID = #{keywordId}
    </delete>

    <insert id="insertLike">
        INSERT INTO USER_NEWS_LIKE (user_id, news_id)
        VALUES (#{userId}, #{newsId})
    </insert>

    <delete id="deleteLike">
        DELETE FROM USER_NEWS_like
        WHERE user_id = #{userId} AND news_id = #{newsId}
    </delete>

    <select id="searchSimilarUsers" resultType="string">
        SELECT u2.user_id
        FROM user_news_like u1
        JOIN user_news_like u2 ON u1.news_id = u2.news_id AND u1.user_id != u2.user_id
        WHERE u1.user_id = #{userId}
        GROUP BY u2.user_id
        ORDER BY COUNT(*) DESC
        LIMIT #{limit}
    </select>

    <select id="searchNewsIdsBySimilarUsers" resultType="long">
        SELECT DISTINCT news_id
        FROM user_news_like
        WHERE user_id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="searchLikedNewsIdsByUser" resultType="long">
        SELECT news_id
        FROM user_news_like
        WHERE user_id = #{userId}
    </select>

    <update id="updateViewCount">
        UPDATE NEWS_INFO
        SET view_count = #{viewCount}
        WHERE news_id = #{newsId}
    </update>

    <select id="getTopLikedNews" resultType="com.ccp.simple.dto.NewsResponseDto">
        SELECT news_id, title, link, description, pub_dt, visible, like_count, view_count
        FROM NEWS_INFO
        WHERE visible = true
        ORDER BY like_count DESC
            LIMIT #{limit}
    </select>

    <select id="getTopViewedNews" resultType="com.ccp.simple.dto.NewsResponseDto">
        SELECT news_id, title, link, description, pub_dt, visible, like_count, view_count
        FROM NEWS_INFO
        WHERE visible = true
        ORDER BY view_count DESC
            LIMIT #{limit}
    </select>

    <select id="getTotalLikesByKeyword" resultType="com.ccp.simple.dto.KeywordCountDto">
        SELECT
            k.keyword AS keyword,
            SUM(n.like_count) AS totalLikes
        FROM
            NEWS_INFO n
                JOIN
            NEWS_KEYWORD_MAPPING m ON n.news_id = m.news_id
                JOIN
            KEYWORD_INFO k ON m.keyword_id = k.keyword_id
        GROUP BY
            k.keyword
        ORDER BY
            totalLikes DESC
            LIMIT #{limit}
    </select>

    <select id="findKeywordByName" resultType="com.ccp.simple.domain.Keyword">
        SELECT keyword_id, keyword, create_dt
        FROM keyword_info
        WHERE keyword = #{keyword}
    </select>

    <insert id="insertKeywordAndGetId" parameterType="com.ccp.simple.domain.Keyword" useGeneratedKeys="true" keyProperty="keywordId">
        INSERT INTO keyword_info (keyword)
        VALUES (#{keyword})
        ON CONFLICT (keyword) DO NOTHING
    </insert>

    <insert id="subscribeKeyword">
        INSERT INTO user_keyword_mapping (user_id, keyword_id)
        VALUES (#{userId}, #{keywordId})
        ON CONFLICT (user_id, keyword_id) DO NOTHING
    </insert>

    <select id="findKeywordsByUserId" resultType="com.ccp.simple.domain.Keyword">
        SELECT k.keyword_id, k.keyword, k.create_dt
        FROM keyword_info k
        JOIN user_keyword_mapping ukm ON k.keyword_id = ukm.keyword_id
        WHERE ukm.user_id = #{userId}
    </select>

    <delete id="deleteKeywordSubscription">
        DELETE FROM user_keyword_mapping
        WHERE user_id = #{userId} AND keyword_id = #{keywordId}
    </delete>

</mapper>
